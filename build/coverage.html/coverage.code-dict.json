{"/home/travis/build/npmtest/node-npmtest-find/test.js":"/* istanbul instrument in package npmtest_find */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-find/lib.npmtest_find.js":"/* istanbul instrument in package npmtest_find */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_find = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_find = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-find/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-find && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_find */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_find\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_find.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_find.rollup.js'] =\n            local.assetsDict['/assets.npmtest_find.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_find.__dirname + '/lib.npmtest_find.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-find/node_modules/find/index.js":"var fs = require('fs');\nvar path = require('path');\nvar Chain = require('traverse-chain');\n\n\n/**\n * Outline the APIs.\n */\nvar find = module.exports = {\n\n  // file:      function([pat,] root, callback) {}\n  // dir:       function([pat,] root, callback) {}\n\n  // eachfile:  function([pat,] root, action) {}\n  // eachdir:   function([pat,] root, action) {}\n\n  // fileSync:  function([pat,] root) {}\n  // dirSync:   function([pat,] root) {}\n\n};\n\n\nvar fss = {};\n\n/**\n *  Error handler wrapper.\n */\nfss.errorHandler = function(err) {\n  if (err) {\n    if (find.__errorHandler) {\n      find.__errorHandler(err);\n    } else {\n      throw err;\n    }\n  }\n};\n\n\nvar error = {\n  notExist: function(name) {\n    return new Error(name + ' does not exist.');\n  }\n};\n\n\nvar is = (function() {\n  function existed(name) {\n    return fs.existsSync(name)\n  }\n  function fsType(type) {\n    return function(name) {\n      try {\n        return fs.lstatSync(name)['is' + type]()\n      } catch(e) {\n        fss.errorHandler(e);\n      }\n    }\n  }\n  function objType(type) {\n    return function(input) {\n      return ({}).toString.call(input) === '[object ' + type +  ']';\n    }\n  }\n  return {\n    existed:      existed,\n    file:         fsType('File'),\n    directory:    fsType('Directory'),\n    symbolicLink: fsType('SymbolicLink'),\n\n    string:       objType('String'),\n    regexp:       objType('RegExp'),\n    func:         objType('Function')\n  };\n}());\n\n\n/**\n *  Method injection for handling errors.\n */\n['readdir', 'lstat'].forEach(function(method) {\n  var origin = fs[method];\n  fss[method] = function(path, callback) {\n    return origin.apply(fs, [path, function(err) {\n      fss.errorHandler(err);\n      return callback.apply(null, arguments);\n    }]);\n  }\n});\n\n\n/**\n * Enhancement for fs.readlink && fs.readlinkSync.\n */\nfss.readlink = function(name, fn, depth) {\n  if (depth == undefined) depth = 10;\n  if (!is.existed(name) && (depth < 10)) {\n    return fn(path.resolve(name));\n  }\n  var isSymbolicLink = is.symbolicLink(name);\n  if (!isSymbolicLink) {\n    fn(path.resolve(name));\n  } else if (depth) {\n    fs.readlink(name, function(err, origin) {\n      fss.errorHandler(err);\n      fss.readlink(origin, fn, --depth);\n    });\n  } else {\n    fn(isSymbolicLink ? '' : path.resolve(name));\n  }\n}\n\nfss.readlinkSync = function(name, depth) {\n  if (depth == undefined) depth = 10;\n  if (!is.existed(name) && depth < 10) {\n    return path.resolve(name);\n  }\n  var isSymbolicLink = is.symbolicLink(name);\n  if (!isSymbolicLink) {\n    return path.resolve(name);\n  } else if (depth) {\n    var origin = fs.readlinkSync(name);\n    return fss.readlinkSync(origin, --depth);\n  } else {\n    return isSymbolicLink ? '' : path.resolve(name);\n  }\n}\n\n\n/**\n * Check pattern against the path\n */\nvar compare = function(pat, name) {\n  var str = path.basename(name);\n  return (\n       is.regexp(pat) && pat.test(name)\n    || is.string(pat) && pat === str\n  );\n};\n\n\n/**\n * Traverse a directory recursively and asynchronously.\n *\n * @param {String} root\n * @param {String} type\n * @param {Function} action\n * @param {Function} callback\n * @param {Chain} c\n * @api private\n */\nvar traverseAsync = function(root, type, action, callback, c) {\n  if (!is.existed(root)) {\n    fss.errorHandler(error.notExist(root))\n  }\n  if (is.directory(root)) {\n    fss.readdir(root, function(err, all) {\n      var chain = Chain();\n      all && all.forEach(function(dir) {\n        dir = path.join(root, dir);\n        chain.add(function() {\n          var handleFile = function() {\n            if (type == 'file') action(dir);\n            process.nextTick(function() { chain.next() });\n          }\n          var handleDir = function(skip) {\n            if (type == 'dir') action(dir);\n            if (skip) chain.next();\n            else process.nextTick(function() { traverseAsync(dir, type, action, callback, chain)});\n          }\n          var isSymbolicLink = is.symbolicLink(dir);\n          if (is.directory(dir)) {\n            handleDir();\n          } else if (isSymbolicLink) {\n            fss.readlink(dir, function(origin) {\n              if (origin) {\n                if (is.existed(origin) && is.directory(origin)) {\n                  handleDir(isSymbolicLink)\n                } else {\n                  handleFile()\n                }\n              } else {\n                chain.next();\n              }\n            });\n          } else {\n            handleFile();\n          }\n        })\n      });\n      chain.traverse(function() {\n        c ? c.next() : callback();\n      });\n    });\n  }\n}\n\n\n/**\n * Traverse a directory recursively.\n *\n * @param {String} root\n * @param {String} type\n * @param {Function} action\n * @return {Array} the result\n * @api private\n */\nvar traverseSync = function(root, type, action) {\n  if (!is.existed(root)) throw error.notExist(root);\n  if (is.directory(root)) {\n    fs.readdirSync(root).forEach(function(dir) {\n      dir = path.join(root, dir);\n      var handleDir = function(skip) {\n        if (type == 'dir') action(dir);\n        if (skip) return;\n        traverseSync(dir, type, action);\n      }\n      var handleFile = function() {\n        if (type == 'file') action(dir);\n      }\n      var isSymbolicLink = is.symbolicLink(dir);\n      if (is.directory(dir)) {\n        handleDir();\n      } else if (isSymbolicLink) {\n        var origin = fss.readlinkSync(dir);\n        if (origin) {\n          if (is.existed(origin) && is.directory(origin)) {\n            handleDir(isSymbolicLink);\n          } else {\n            handleFile();\n          }\n        }\n      } else {\n        handleFile();\n      }\n    });\n  }\n};\n\n\n['file', 'dir'].forEach(function(type) {\n\n  /**\n   * `find.file` and `find.dir`\n   *\n   * Find files or sub-directories in a given directory and\n   * passes the result in an array as a whole. This follows\n   * the default callback style of nodejs, think about `fs.readdir`,\n   *\n   * @param {RegExp|String} pat\n   * @param {String} root\n   * @param {Function} fn\n   * @api public\n   */\n  find[type] = function(pat, root, fn) {\n    var buffer = [];\n    if (arguments.length == 2) {\n      fn = root;\n      root = pat;\n      pat = '';\n    }\n    process.nextTick(function() {\n      traverseAsync(\n        root\n      , type\n      , function(n) { buffer.push(n);}\n      , function() {\n          if (is.func(fn) && pat) {\n            fn(buffer.filter(function(n) {\n              return compare(pat, n);\n            }));\n          } else {\n            fn(buffer);\n          }\n        }\n      );\n    });\n    return {\n      error: function(handler) {\n        if (is.func(handler)) {\n          find.__errorHandler = handler;\n        }\n      }\n    }\n  }\n\n  /**\n   * `find.eachfile` and `find.eachdir`\n   *\n   * Find files or sub-directories in a given directory and\n   * apply with a given action to each result immediately\n   * rather than pass them back as an array.\n   *\n   * @param {RegExp|String} pat\n   * @param {String} root\n   * @param {Function} action\n   * @return {Object} for chain methods\n   * @api public\n   *\n   */\n  find['each' + type] = function(pat, root, action) {\n    var callback = function() {}\n    if (arguments.length == 2) {\n      action = root;\n      root = pat;\n      pat = '';\n    }\n    process.nextTick(function() {\n      traverseAsync(\n          root\n        , type\n        , function(n) {\n            if (!is.func(action)) return;\n            if (!pat || compare(pat, n)) {\n              action(n);\n            }\n          }\n        , callback\n      );\n    });\n    return {\n      end: function(fn) {\n        if (is.func(fn)) {\n          callback = fn;\n        }\n        return this;\n      },\n      error: function(handler) {\n        if (is.func(handler)) {\n          find.__errorHandler = handler;\n        }\n        return this;\n      }\n    };\n  }\n\n  /**\n   * `find.fileSync` and `find.dirSync`\n   *\n   * Find files or sub-directories in a given directory synchronously\n   * and returns the result as an array. This follows the default 'Sync'\n   * methods of nodejs, think about `fs.readdirSync`,\n   *\n   * @param {RegExp|String} pat\n   * @param {String} root\n   * @return {Array} the result\n   * @api public\n   */\n  find[type + 'Sync'] = function(pat, root) {\n    var buffer = [];\n    if (arguments.length == 1) {\n      root = pat;\n      pat = '';\n    }\n    traverseSync(root, type, function(n) {\n      buffer.push(n);\n    });\n    return pat && buffer.filter(function(n) {\n      return compare(pat, n);\n    }) || buffer;\n  }\n\n});\n\n"}